// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: infos.proto

package infos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	timestamp "satweave/utils/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InfoType int32

const (
	InfoType_INVALID      InfoType = 0
	InfoType_NODE_INFO    InfoType = 1
	InfoType_BUCKET_INFO  InfoType = 2
	InfoType_CLUSTER_INFO InfoType = 3
	InfoType_USER_INFO    InfoType = 4
	InfoType_GROUP_INFO   InfoType = 5
	InfoType_VOLUME_INFO  InfoType = 6
	InfoType_ACCESS_INFO  InfoType = 7
	InfoType_TASK_INFO    InfoType = 8
)

var InfoType_name = map[int32]string{
	0: "INVALID",
	1: "NODE_INFO",
	2: "BUCKET_INFO",
	3: "CLUSTER_INFO",
	4: "USER_INFO",
	5: "GROUP_INFO",
	6: "VOLUME_INFO",
	7: "ACCESS_INFO",
	8: "TASK_INFO",
}

var InfoType_value = map[string]int32{
	"INVALID":      0,
	"NODE_INFO":    1,
	"BUCKET_INFO":  2,
	"CLUSTER_INFO": 3,
	"USER_INFO":    4,
	"GROUP_INFO":   5,
	"VOLUME_INFO":  6,
	"ACCESS_INFO":  7,
	"TASK_INFO":    8,
}

func (x InfoType) String() string {
	return proto.EnumName(InfoType_name, int32(x))
}

func (InfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{0}
}

type TaskState int32

const (
	TaskState_Scheduled TaskState = 0
	TaskState_Running   TaskState = 1
	TaskState_Finished  TaskState = 2
)

var TaskState_name = map[int32]string{
	0: "Scheduled",
	1: "Running",
	2: "Finished",
}

var TaskState_value = map[string]int32{
	"Scheduled": 0,
	"Running":   1,
	"Finished":  2,
}

func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}

func (TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{1}
}

type TaskType int32

const (
	TaskType_Online  TaskType = 0
	TaskType_Offline TaskType = 1
)

var TaskType_name = map[int32]string{
	0: "Online",
	1: "Offline",
}

var TaskType_value = map[string]int32{
	"Online":  0,
	"Offline": 1,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}

func (TaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{2}
}

type NodeState int32

const (
	NodeState_UNKNOWN NodeState = 0
	NodeState_ONLINE  NodeState = 1
	NodeState_OFFLINE NodeState = 2
	NodeState_ERROR   NodeState = 3
)

var NodeState_name = map[int32]string{
	0: "UNKNOWN",
	1: "ONLINE",
	2: "OFFLINE",
	3: "ERROR",
}

var NodeState_value = map[string]int32{
	"UNKNOWN": 0,
	"ONLINE":  1,
	"OFFLINE": 2,
	"ERROR":   3,
}

func (x NodeState) String() string {
	return proto.EnumName(NodeState_name, int32(x))
}

func (NodeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{3}
}

// BaseInfo collect all type of info
type BaseInfo struct {
	// Types that are valid to be assigned to Info:
	//	*BaseInfo_NodeInfo
	//	*BaseInfo_ClusterInfo
	//	*BaseInfo_UserInfo
	//	*BaseInfo_GroupInfo
	//	*BaseInfo_AccessInfo
	//	*BaseInfo_TaskInfo
	Info                 isBaseInfo_Info `protobuf_oneof:"info"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BaseInfo) Reset()         { *m = BaseInfo{} }
func (m *BaseInfo) String() string { return proto.CompactTextString(m) }
func (*BaseInfo) ProtoMessage()    {}
func (*BaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{0}
}
func (m *BaseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfo.Merge(m, src)
}
func (m *BaseInfo) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfo proto.InternalMessageInfo

type isBaseInfo_Info interface {
	isBaseInfo_Info()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BaseInfo_NodeInfo struct {
	NodeInfo *NodeInfo `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3,oneof" json:"node_info,omitempty"`
}
type BaseInfo_ClusterInfo struct {
	ClusterInfo *ClusterInfo `protobuf:"bytes,2,opt,name=cluster_info,json=clusterInfo,proto3,oneof" json:"cluster_info,omitempty"`
}
type BaseInfo_UserInfo struct {
	UserInfo *UserInfo `protobuf:"bytes,3,opt,name=user_info,json=userInfo,proto3,oneof" json:"user_info,omitempty"`
}
type BaseInfo_GroupInfo struct {
	GroupInfo *GroupInfo `protobuf:"bytes,4,opt,name=group_info,json=groupInfo,proto3,oneof" json:"group_info,omitempty"`
}
type BaseInfo_AccessInfo struct {
	AccessInfo *AccessInfo `protobuf:"bytes,5,opt,name=access_info,json=accessInfo,proto3,oneof" json:"access_info,omitempty"`
}
type BaseInfo_TaskInfo struct {
	TaskInfo *TaskInfo `protobuf:"bytes,6,opt,name=task_info,json=taskInfo,proto3,oneof" json:"task_info,omitempty"`
}

func (*BaseInfo_NodeInfo) isBaseInfo_Info()    {}
func (*BaseInfo_ClusterInfo) isBaseInfo_Info() {}
func (*BaseInfo_UserInfo) isBaseInfo_Info()    {}
func (*BaseInfo_GroupInfo) isBaseInfo_Info()   {}
func (*BaseInfo_AccessInfo) isBaseInfo_Info()  {}
func (*BaseInfo_TaskInfo) isBaseInfo_Info()    {}

func (m *BaseInfo) GetInfo() isBaseInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *BaseInfo) GetNodeInfo() *NodeInfo {
	if x, ok := m.GetInfo().(*BaseInfo_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (m *BaseInfo) GetClusterInfo() *ClusterInfo {
	if x, ok := m.GetInfo().(*BaseInfo_ClusterInfo); ok {
		return x.ClusterInfo
	}
	return nil
}

func (m *BaseInfo) GetUserInfo() *UserInfo {
	if x, ok := m.GetInfo().(*BaseInfo_UserInfo); ok {
		return x.UserInfo
	}
	return nil
}

func (m *BaseInfo) GetGroupInfo() *GroupInfo {
	if x, ok := m.GetInfo().(*BaseInfo_GroupInfo); ok {
		return x.GroupInfo
	}
	return nil
}

func (m *BaseInfo) GetAccessInfo() *AccessInfo {
	if x, ok := m.GetInfo().(*BaseInfo_AccessInfo); ok {
		return x.AccessInfo
	}
	return nil
}

func (m *BaseInfo) GetTaskInfo() *TaskInfo {
	if x, ok := m.GetInfo().(*BaseInfo_TaskInfo); ok {
		return x.TaskInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BaseInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BaseInfo_NodeInfo)(nil),
		(*BaseInfo_ClusterInfo)(nil),
		(*BaseInfo_UserInfo)(nil),
		(*BaseInfo_GroupInfo)(nil),
		(*BaseInfo_AccessInfo)(nil),
		(*BaseInfo_TaskInfo)(nil),
	}
}

// UserInfo is the info of SatWeave user
type UserInfo struct {
	UserId               string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string               `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserGroup            string               `protobuf:"bytes,3,opt,name=user_group,json=userGroup,proto3" json:"user_group,omitempty"`
	UserEmail            string               `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	UserPassword         string               `protobuf:"bytes,5,opt,name=user_password,json=userPassword,proto3" json:"user_password,omitempty"`
	UserStatus           string               `protobuf:"bytes,6,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
	UserCreatedAt        *timestamp.Timestamp `protobuf:"bytes,7,opt,name=user_created_at,json=userCreatedAt,proto3" json:"user_created_at,omitempty"`
	UserUpdatedAt        *timestamp.Timestamp `protobuf:"bytes,8,opt,name=user_updated_at,json=userUpdatedAt,proto3" json:"user_updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{1}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfo) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *UserInfo) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *UserInfo) GetUserPassword() string {
	if m != nil {
		return m.UserPassword
	}
	return ""
}

func (m *UserInfo) GetUserStatus() string {
	if m != nil {
		return m.UserStatus
	}
	return ""
}

func (m *UserInfo) GetUserCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UserCreatedAt
	}
	return nil
}

func (m *UserInfo) GetUserUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UserUpdatedAt
	}
	return nil
}

type GroupInfo struct {
	GroupId              string               `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName            string               `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupDescription     string               `protobuf:"bytes,3,opt,name=group_description,json=groupDescription,proto3" json:"group_description,omitempty"`
	GroupCreatedAt       *timestamp.Timestamp `protobuf:"bytes,4,opt,name=group_created_at,json=groupCreatedAt,proto3" json:"group_created_at,omitempty"`
	GroupUpdatedAt       *timestamp.Timestamp `protobuf:"bytes,5,opt,name=group_updated_at,json=groupUpdatedAt,proto3" json:"group_updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{2}
}
func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

func (m *GroupInfo) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *GroupInfo) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *GroupInfo) GetGroupDescription() string {
	if m != nil {
		return m.GroupDescription
	}
	return ""
}

func (m *GroupInfo) GetGroupCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.GroupCreatedAt
	}
	return nil
}

func (m *GroupInfo) GetGroupUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.GroupUpdatedAt
	}
	return nil
}

type AccessInfo struct {
	AccessKey            string   `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	AccessSecret         string   `protobuf:"bytes,2,opt,name=access_secret,json=accessSecret,proto3" json:"access_secret,omitempty"`
	UserId               string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessInfo) Reset()         { *m = AccessInfo{} }
func (m *AccessInfo) String() string { return proto.CompactTextString(m) }
func (*AccessInfo) ProtoMessage()    {}
func (*AccessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{3}
}
func (m *AccessInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessInfo.Merge(m, src)
}
func (m *AccessInfo) XXX_Size() int {
	return m.Size()
}
func (m *AccessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccessInfo proto.InternalMessageInfo

func (m *AccessInfo) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *AccessInfo) GetAccessSecret() string {
	if m != nil {
		return m.AccessSecret
	}
	return ""
}

func (m *AccessInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ClusterInfo struct {
	Term                 uint64               `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderInfo           *NodeInfo            `protobuf:"bytes,2,opt,name=leader_info,json=leaderInfo,proto3" json:"leader_info,omitempty"`
	NodesInfo            []*NodeInfo          `protobuf:"bytes,3,rep,name=nodes_info,json=nodesInfo,proto3" json:"nodes_info,omitempty"`
	UpdateTimestamp      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty"`
	LastTerm             uint64               `protobuf:"varint,9,opt,name=last_term,json=lastTerm,proto3" json:"last_term,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClusterInfo) Reset()         { *m = ClusterInfo{} }
func (m *ClusterInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterInfo) ProtoMessage()    {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{4}
}
func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ClusterInfo) GetLeaderInfo() *NodeInfo {
	if m != nil {
		return m.LeaderInfo
	}
	return nil
}

func (m *ClusterInfo) GetNodesInfo() []*NodeInfo {
	if m != nil {
		return m.NodesInfo
	}
	return nil
}

func (m *ClusterInfo) GetUpdateTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTimestamp
	}
	return nil
}

func (m *ClusterInfo) GetLastTerm() uint64 {
	if m != nil {
		return m.LastTerm
	}
	return 0
}

type TaskInfo struct {
	// 任务 id
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 客户端的ip
	UserIp string `protobuf:"bytes,2,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`
	// 客户端的rpc端口
	UserPort string `protobuf:"bytes,3,opt,name=user_port,json=userPort,proto3" json:"user_port,omitempty"`
	// 任务的文件路径，可以为空
	FilePath string `protobuf:"bytes,4,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// 需要运行的任务镜像名
	ImageName string `protobuf:"bytes,5,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// 任务当前的状态
	State TaskState `protobuf:"varint,6,opt,name=state,proto3,enum=messenger.TaskState" json:"state,omitempty"`
	// 任务类型
	Type TaskType `protobuf:"varint,7,opt,name=type,proto3,enum=messenger.TaskType" json:"type,omitempty"`
	// 实际被调度到的节点信息
	WorkerInfo           *NodeInfo `protobuf:"bytes,8,opt,name=worker_info,json=workerInfo,proto3" json:"worker_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TaskInfo) Reset()         { *m = TaskInfo{} }
func (m *TaskInfo) String() string { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()    {}
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{5}
}
func (m *TaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInfo.Merge(m, src)
}
func (m *TaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInfo proto.InternalMessageInfo

func (m *TaskInfo) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskInfo) GetUserIp() string {
	if m != nil {
		return m.UserIp
	}
	return ""
}

func (m *TaskInfo) GetUserPort() string {
	if m != nil {
		return m.UserPort
	}
	return ""
}

func (m *TaskInfo) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *TaskInfo) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *TaskInfo) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_Scheduled
}

func (m *TaskInfo) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TaskType_Online
}

func (m *TaskInfo) GetWorkerInfo() *NodeInfo {
	if m != nil {
		return m.WorkerInfo
	}
	return nil
}

type InfoStorageState struct {
	Term                 uint64               `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderID             uint64               `protobuf:"varint,2,opt,name=LeaderID,proto3" json:"LeaderID,omitempty"`
	InfoMap              map[uint64]*NodeInfo `protobuf:"bytes,3,rep,name=InfoMap,proto3" json:"InfoMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UpdateTimeStamp      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=UpdateTimeStamp,proto3" json:"UpdateTimeStamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *InfoStorageState) Reset()         { *m = InfoStorageState{} }
func (m *InfoStorageState) String() string { return proto.CompactTextString(m) }
func (*InfoStorageState) ProtoMessage()    {}
func (*InfoStorageState) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{6}
}
func (m *InfoStorageState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoStorageState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoStorageState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoStorageState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoStorageState.Merge(m, src)
}
func (m *InfoStorageState) XXX_Size() int {
	return m.Size()
}
func (m *InfoStorageState) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoStorageState.DiscardUnknown(m)
}

var xxx_messageInfo_InfoStorageState proto.InternalMessageInfo

func (m *InfoStorageState) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *InfoStorageState) GetLeaderID() uint64 {
	if m != nil {
		return m.LeaderID
	}
	return 0
}

func (m *InfoStorageState) GetInfoMap() map[uint64]*NodeInfo {
	if m != nil {
		return m.InfoMap
	}
	return nil
}

func (m *InfoStorageState) GetUpdateTimeStamp() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTimeStamp
	}
	return nil
}

type NodeInfo struct {
	RaftId               uint64    `protobuf:"varint,1,opt,name=raft_id,json=raftId,proto3" json:"raft_id,omitempty"`
	Uuid                 string    `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	IpAddr               string    `protobuf:"bytes,3,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	RpcPort              uint64    `protobuf:"varint,4,opt,name=rpc_port,json=rpcPort,proto3" json:"rpc_port,omitempty"`
	Capacity             uint64    `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
	State                NodeState `protobuf:"varint,6,opt,name=state,proto3,enum=messenger.NodeState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{7}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetRaftId() uint64 {
	if m != nil {
		return m.RaftId
	}
	return 0
}

func (m *NodeInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *NodeInfo) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *NodeInfo) GetRpcPort() uint64 {
	if m != nil {
		return m.RpcPort
	}
	return 0
}

func (m *NodeInfo) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *NodeInfo) GetState() NodeState {
	if m != nil {
		return m.State
	}
	return NodeState_UNKNOWN
}

type CfContent struct {
	CfName               string   `protobuf:"bytes,1,opt,name=cf_name,json=cfName,proto3" json:"cf_name,omitempty"`
	Keys                 [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Values               [][]byte `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CfContent) Reset()         { *m = CfContent{} }
func (m *CfContent) String() string { return proto.CompactTextString(m) }
func (*CfContent) ProtoMessage()    {}
func (*CfContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{8}
}
func (m *CfContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CfContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CfContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CfContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CfContent.Merge(m, src)
}
func (m *CfContent) XXX_Size() int {
	return m.Size()
}
func (m *CfContent) XXX_DiscardUnknown() {
	xxx_messageInfo_CfContent.DiscardUnknown(m)
}

var xxx_messageInfo_CfContent proto.InternalMessageInfo

func (m *CfContent) GetCfName() string {
	if m != nil {
		return m.CfName
	}
	return ""
}

func (m *CfContent) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *CfContent) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type Snapshot struct {
	CfContents           []*CfContent `protobuf:"bytes,1,rep,name=cf_contents,json=cfContents,proto3" json:"cf_contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c0905e918bfd6e, []int{9}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetCfContents() []*CfContent {
	if m != nil {
		return m.CfContents
	}
	return nil
}

func init() {
	proto.RegisterEnum("messenger.InfoType", InfoType_name, InfoType_value)
	proto.RegisterEnum("messenger.TaskState", TaskState_name, TaskState_value)
	proto.RegisterEnum("messenger.TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("messenger.NodeState", NodeState_name, NodeState_value)
	proto.RegisterType((*BaseInfo)(nil), "messenger.BaseInfo")
	proto.RegisterType((*UserInfo)(nil), "messenger.UserInfo")
	proto.RegisterType((*GroupInfo)(nil), "messenger.GroupInfo")
	proto.RegisterType((*AccessInfo)(nil), "messenger.AccessInfo")
	proto.RegisterType((*ClusterInfo)(nil), "messenger.ClusterInfo")
	proto.RegisterType((*TaskInfo)(nil), "messenger.TaskInfo")
	proto.RegisterType((*InfoStorageState)(nil), "messenger.InfoStorageState")
	proto.RegisterMapType((map[uint64]*NodeInfo)(nil), "messenger.InfoStorageState.InfoMapEntry")
	proto.RegisterType((*NodeInfo)(nil), "messenger.NodeInfo")
	proto.RegisterType((*CfContent)(nil), "messenger.CfContent")
	proto.RegisterType((*Snapshot)(nil), "messenger.Snapshot")
}

func init() { proto.RegisterFile("infos.proto", fileDescriptor_84c0905e918bfd6e) }

var fileDescriptor_84c0905e918bfd6e = []byte{
	// 1170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xda, 0x6b, 0x7b, 0xf7, 0xd9, 0x4d, 0x96, 0x01, 0xda, 0x10, 0x44, 0xa8, 0xdc, 0x03,
	0x6d, 0x10, 0xa9, 0x54, 0xa8, 0x54, 0x41, 0x55, 0xe4, 0x38, 0x4e, 0xb1, 0x92, 0xda, 0xd1, 0xd8,
	0x2e, 0x12, 0x17, 0x6b, 0xd8, 0x1d, 0x3b, 0x2b, 0xdb, 0xbb, 0xab, 0x9d, 0xd9, 0x56, 0xfe, 0x24,
	0xc0, 0x8d, 0xef, 0xc0, 0x17, 0xe0, 0xc8, 0x91, 0x0f, 0xc0, 0x01, 0x85, 0x13, 0x57, 0x3e, 0x01,
	0x9a, 0x37, 0xb3, 0xeb, 0x6d, 0x03, 0xc9, 0xed, 0xfd, 0xfb, 0xcd, 0xce, 0xfb, 0xbd, 0xdf, 0x1b,
	0x2d, 0x34, 0xc3, 0x68, 0x16, 0x8b, 0xc3, 0x24, 0x8d, 0x65, 0x4c, 0xdc, 0x15, 0x17, 0x82, 0x47,
	0x73, 0x9e, 0xee, 0xed, 0xc8, 0x70, 0xc5, 0x85, 0x64, 0xab, 0x44, 0xe7, 0xda, 0x7f, 0x54, 0xc0,
	0x39, 0x62, 0x82, 0xf7, 0xa3, 0x59, 0x4c, 0x1e, 0x81, 0x1b, 0xc5, 0x01, 0x9f, 0x2a, 0xf0, 0xae,
	0x75, 0xd7, 0xba, 0xdf, 0x7c, 0xf4, 0xee, 0x61, 0x01, 0x3e, 0x1c, 0xc4, 0x01, 0xd6, 0x7d, 0xb3,
	0x45, 0x9d, 0xc8, 0xd8, 0xe4, 0x2b, 0x68, 0xf9, 0xcb, 0x4c, 0x48, 0x9e, 0x6a, 0x58, 0x05, 0x61,
	0xb7, 0x4b, 0xb0, 0xae, 0x4e, 0x1b, 0x64, 0xd3, 0xdf, 0xb8, 0xea, 0x83, 0x99, 0xc8, 0x91, 0xd5,
	0x2b, 0x1f, 0x9c, 0x88, 0x02, 0xe6, 0x64, 0xc6, 0x26, 0x8f, 0x01, 0xe6, 0x69, 0x9c, 0x25, 0x1a,
	0x64, 0x23, 0xe8, 0xbd, 0x12, 0xe8, 0xb9, 0x4a, 0x1a, 0x94, 0x3b, 0xcf, 0x1d, 0xf2, 0x04, 0x9a,
	0xcc, 0xf7, 0xb9, 0x10, 0x1a, 0x57, 0x43, 0xdc, 0xfb, 0x25, 0x5c, 0x07, 0xb3, 0x06, 0x08, 0xac,
	0xf0, 0xd4, 0x25, 0x25, 0x13, 0x0b, 0x8d, 0xab, 0x5f, 0xb9, 0xe4, 0x98, 0x89, 0x45, 0x7e, 0x49,
	0x69, 0xec, 0xa3, 0x3a, 0xd8, 0xaa, 0xbc, 0xfd, 0x6b, 0x05, 0x9c, 0xbc, 0x0b, 0x72, 0x07, 0x1a,
	0xba, 0xdb, 0x00, 0xc9, 0x75, 0x69, 0x1d, 0x9b, 0x0a, 0xc8, 0x87, 0x86, 0x86, 0x88, 0xad, 0x38,
	0x12, 0xe8, 0xea, 0x7e, 0x07, 0x6c, 0xc5, 0xc9, 0x47, 0x00, 0x98, 0xc4, 0x56, 0x90, 0x24, 0x97,
	0x62, 0x39, 0x36, 0x5a, 0xa4, 0xf9, 0x8a, 0x85, 0x4b, 0xa4, 0xc3, 0xa4, 0x7b, 0x2a, 0x40, 0xee,
	0xc1, 0x2d, 0x4c, 0x27, 0x4c, 0x88, 0xd7, 0x71, 0x1a, 0x60, 0xe3, 0x2e, 0x6d, 0xa9, 0xe0, 0xb9,
	0x89, 0x91, 0x8f, 0xa1, 0x89, 0x45, 0x42, 0x32, 0x99, 0x09, 0xec, 0xd1, 0xa5, 0x78, 0xec, 0x08,
	0x23, 0xe4, 0x29, 0xec, 0x60, 0x81, 0x9f, 0x72, 0x26, 0x79, 0x30, 0x65, 0x72, 0xb7, 0x71, 0x85,
	0xf8, 0x71, 0x2e, 0x2d, 0x8a, 0x9f, 0xec, 0xea, 0xda, 0x8e, 0x2c, 0xd0, 0x59, 0x12, 0xe4, 0x68,
	0xe7, 0x26, 0xf4, 0x44, 0xd7, 0x76, 0x64, 0xfb, 0x1f, 0x0b, 0xdc, 0x62, 0xa6, 0xe4, 0x03, 0x70,
	0xcc, 0xf4, 0x73, 0x12, 0x1b, 0x7a, 0xc6, 0x81, 0x62, 0x42, 0xa7, 0x4a, 0x34, 0x6a, 0x01, 0x20,
	0x8f, 0x9f, 0xc2, 0x3b, 0x3a, 0x1d, 0x70, 0xe1, 0xa7, 0x61, 0x22, 0xc3, 0x38, 0x32, 0x74, 0x7a,
	0x98, 0x38, 0xde, 0xc4, 0xc9, 0x33, 0xd0, 0xb1, 0x72, 0xc7, 0xf6, 0x35, 0x77, 0xde, 0xc6, 0xea,
	0x4d, 0xcb, 0x05, 0xbe, 0xd4, 0x73, 0xed, 0x46, 0xfc, 0xa6, 0xe9, 0x10, 0x60, 0xa3, 0x47, 0xd5,
	0x99, 0xd1, 0xee, 0x82, 0xaf, 0x4d, 0xdb, 0xae, 0x8e, 0x9c, 0xf2, 0xb5, 0x9a, 0xb1, 0x49, 0x0b,
	0xee, 0xa7, 0x5c, 0x9a, 0xde, 0x5b, 0x3a, 0x38, 0xc2, 0x58, 0x59, 0x7c, 0xd5, 0xb2, 0xf8, 0xda,
	0x7f, 0x5b, 0xd0, 0x2c, 0xad, 0x28, 0x21, 0x60, 0x4b, 0x9e, 0xae, 0xf0, 0x33, 0x36, 0x45, 0x9b,
	0x7c, 0x01, 0xcd, 0x25, 0x67, 0xc1, 0x9b, 0x3b, 0xfe, 0x5f, 0x4f, 0x03, 0x05, 0x5d, 0x67, 0x16,
	0x07, 0xd4, 0x33, 0x21, 0xf2, 0xf5, 0xae, 0xfe, 0x1f, 0x08, 0x5f, 0x1d, 0xdd, 0xea, 0xd7, 0xe0,
	0x69, 0xca, 0xa6, 0xc5, 0x4b, 0x75, 0x2d, 0xf1, 0x3b, 0xba, 0xba, 0x08, 0xa8, 0x5d, 0x5a, 0x32,
	0x21, 0xa7, 0xd8, 0x83, 0x8b, 0x3d, 0x38, 0x2a, 0x30, 0xe6, 0xe9, 0xaa, 0xfd, 0x73, 0x05, 0x9c,
	0x7c, 0x5f, 0x15, 0x23, 0x7a, 0xaf, 0x8b, 0x75, 0xc4, 0xf5, 0x0d, 0x36, 0x54, 0x25, 0x86, 0x49,
	0x4d, 0x55, 0x52, 0xec, 0x69, 0x12, 0xa7, 0xd2, 0xb0, 0x88, 0x7b, 0x7a, 0x1e, 0xa7, 0x52, 0x25,
	0x67, 0xe1, 0x92, 0x4f, 0x13, 0x26, 0x2f, 0xcc, 0x1e, 0x3a, 0x2a, 0x70, 0xce, 0xe4, 0x85, 0x9a,
	0x60, 0xb8, 0x62, 0x73, 0xae, 0xb5, 0xa9, 0x77, 0xd0, 0xc5, 0x08, 0x6a, 0xf3, 0x00, 0x6a, 0x6a,
	0xf7, 0x38, 0xae, 0xde, 0xf6, 0x9b, 0xad, 0x32, 0xb1, 0x50, 0x5b, 0xc8, 0xa9, 0x2e, 0x21, 0x9f,
	0x80, 0x2d, 0xd7, 0x09, 0xc7, 0x05, 0xdc, 0xbe, 0xf2, 0x12, 0x8d, 0xd7, 0x09, 0xa7, 0x58, 0xa0,
	0x86, 0xf6, 0x3a, 0x4e, 0x17, 0xf9, 0xd0, 0x9c, 0x6b, 0x86, 0xa6, 0xeb, 0x94, 0xdd, 0xfe, 0xa1,
	0x02, 0x9e, 0x32, 0x46, 0x32, 0x4e, 0xd9, 0x9c, 0xe3, 0xa7, 0x95, 0x26, 0xc6, 0x25, 0x4d, 0x28,
	0x9b, 0xec, 0x81, 0x73, 0xa6, 0x67, 0x7d, 0x8c, 0x34, 0xd9, 0xb4, 0xf0, 0xc9, 0x11, 0x34, 0xd4,
	0x19, 0x2f, 0x58, 0x62, 0xc6, 0x7e, 0xbf, 0xf4, 0xd9, 0xb7, 0x4f, 0x3f, 0x34, 0xa5, 0xbd, 0x48,
	0xa6, 0x6b, 0x9a, 0x03, 0xc9, 0x33, 0xd8, 0x99, 0x14, 0xb3, 0x1d, 0xdd, 0x2c, 0x84, 0xb7, 0x8a,
	0xf7, 0x86, 0xd0, 0x2a, 0x1f, 0x4c, 0x3c, 0xa8, 0xe6, 0xdb, 0x63, 0x53, 0x65, 0x92, 0x07, 0x50,
	0x7b, 0xc5, 0x96, 0x19, 0xbf, 0x4e, 0xcf, 0xba, 0xe2, 0xcb, 0xca, 0x13, 0xab, 0xfd, 0x8b, 0x05,
	0x4e, 0x1e, 0x57, 0x1a, 0x49, 0xd9, 0x4c, 0xe6, 0xe2, 0xb1, 0x69, 0x5d, 0xb9, 0xfd, 0x40, 0x51,
	0x95, 0x65, 0x61, 0x60, 0x94, 0x83, 0xb6, 0x2a, 0x0e, 0x93, 0x29, 0x0b, 0x82, 0x34, 0xdf, 0xbd,
	0x30, 0xe9, 0x04, 0x41, 0xaa, 0x5e, 0xb3, 0x34, 0xf1, 0xb5, 0x9e, 0x6c, 0x3c, 0xa6, 0x91, 0x26,
	0x3e, 0xca, 0x69, 0x0f, 0x1c, 0x9f, 0x25, 0xcc, 0x0f, 0xe5, 0x1a, 0xf5, 0x62, 0xd3, 0xc2, 0xbf,
	0x4e, 0x2e, 0xea, 0x82, 0x65, 0xb9, 0xb4, 0xcf, 0xc1, 0xed, 0xce, 0xba, 0x71, 0x24, 0x79, 0x84,
	0x8f, 0x80, 0x3f, 0xd3, 0x1a, 0x34, 0x92, 0xf7, 0x67, 0x28, 0x40, 0x02, 0xf6, 0x82, 0xaf, 0xc5,
	0x6e, 0xe5, 0x6e, 0xf5, 0x7e, 0x8b, 0xa2, 0x4d, 0x6e, 0x43, 0x1d, 0x9b, 0x17, 0x38, 0xc3, 0x16,
	0x35, 0x5e, 0xbb, 0x03, 0xce, 0x28, 0x62, 0x89, 0xb8, 0x88, 0x25, 0x79, 0x0c, 0x4d, 0x7f, 0x36,
	0xf5, 0xf5, 0xf1, 0x62, 0xd7, 0xc2, 0x61, 0x97, 0xef, 0x53, 0x7c, 0x9b, 0x82, 0x9f, 0x9b, 0xe2,
	0xe0, 0x27, 0x0b, 0x1c, 0x45, 0xa3, 0x52, 0x2b, 0x69, 0x42, 0xa3, 0x3f, 0x78, 0xd9, 0x39, 0xeb,
	0x1f, 0x7b, 0x5b, 0xe4, 0x16, 0xb8, 0x83, 0xe1, 0x71, 0x6f, 0xda, 0x1f, 0x9c, 0x0c, 0x3d, 0x8b,
	0xec, 0x40, 0xf3, 0x68, 0xd2, 0x3d, 0xed, 0x8d, 0x75, 0xa0, 0x42, 0x3c, 0x68, 0x75, 0xcf, 0x26,
	0xa3, 0x71, 0x8f, 0xea, 0x48, 0x55, 0x21, 0x26, 0xa3, 0xdc, 0xb5, 0xc9, 0x36, 0xc0, 0x73, 0x3a,
	0x9c, 0x9c, 0x6b, 0xbf, 0xa6, 0x4e, 0x78, 0x39, 0x3c, 0x9b, 0xbc, 0x30, 0x47, 0xd6, 0x55, 0xa0,
	0xd3, 0xed, 0xf6, 0x46, 0x23, 0x1d, 0x68, 0xa8, 0x03, 0xc6, 0x9d, 0xd1, 0xa9, 0x76, 0x9d, 0x83,
	0xc7, 0xe0, 0x16, 0x3b, 0xa7, 0x72, 0x23, 0xff, 0x82, 0x07, 0xd9, 0x92, 0x07, 0xde, 0x96, 0xba,
	0x2a, 0xcd, 0xa2, 0x28, 0x8c, 0xe6, 0x9e, 0x45, 0x5a, 0xe0, 0x9c, 0x84, 0x51, 0x28, 0x2e, 0x78,
	0xe0, 0x55, 0x0e, 0xee, 0xe9, 0x97, 0x05, 0x3b, 0x02, 0xa8, 0x0f, 0xa3, 0x65, 0x18, 0x71, 0x0d,
	0x19, 0xce, 0x66, 0xe8, 0x58, 0x07, 0x4f, 0xc1, 0x2d, 0x06, 0xa4, 0x32, 0x93, 0xc1, 0xe9, 0x60,
	0xf8, 0xed, 0xc0, 0xdb, 0x42, 0xc8, 0xe0, 0xac, 0x3f, 0xe8, 0x79, 0x16, 0x42, 0x4e, 0x4e, 0xd0,
	0xa9, 0x10, 0x17, 0x6a, 0x3d, 0x4a, 0x87, 0xd4, 0xab, 0x1e, 0x3d, 0xf8, 0xed, 0x72, 0xdf, 0xfa,
	0xfd, 0x72, 0xdf, 0xfa, 0xf3, 0x72, 0xdf, 0xfa, 0xf1, 0xaf, 0xfd, 0xad, 0xef, 0xee, 0x08, 0x26,
	0x5f, 0x73, 0xf6, 0x8a, 0x3f, 0x14, 0x4c, 0x7e, 0xa6, 0x5e, 0xd1, 0x87, 0xf8, 0xe3, 0xf7, 0x7d,
	0x1d, 0xff, 0xee, 0x3e, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x62, 0xa6, 0xe8, 0x08, 0x0a,
	0x00, 0x00,
}

func (m *BaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BaseInfo_NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo_NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BaseInfo_ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo_ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterInfo != nil {
		{
			size, err := m.ClusterInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BaseInfo_UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo_UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserInfo != nil {
		{
			size, err := m.UserInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BaseInfo_GroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo_GroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GroupInfo != nil {
		{
			size, err := m.GroupInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BaseInfo_AccessInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo_AccessInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccessInfo != nil {
		{
			size, err := m.AccessInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *BaseInfo_TaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfo_TaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TaskInfo != nil {
		{
			size, err := m.TaskInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserUpdatedAt != nil {
		{
			size, err := m.UserUpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UserCreatedAt != nil {
		{
			size, err := m.UserCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UserStatus) > 0 {
		i -= len(m.UserStatus)
		copy(dAtA[i:], m.UserStatus)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserStatus)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UserPassword) > 0 {
		i -= len(m.UserPassword)
		copy(dAtA[i:], m.UserPassword)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserPassword)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UserEmail) > 0 {
		i -= len(m.UserEmail)
		copy(dAtA[i:], m.UserEmail)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserEmail)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserGroup) > 0 {
		i -= len(m.UserGroup)
		copy(dAtA[i:], m.UserGroup)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserGroup)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupUpdatedAt != nil {
		{
			size, err := m.GroupUpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GroupCreatedAt != nil {
		{
			size, err := m.GroupCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupDescription) > 0 {
		i -= len(m.GroupDescription)
		copy(dAtA[i:], m.GroupDescription)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.GroupDescription)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccessInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessSecret) > 0 {
		i -= len(m.AccessSecret)
		copy(dAtA[i:], m.AccessSecret)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.AccessSecret)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessKey) > 0 {
		i -= len(m.AccessKey)
		copy(dAtA[i:], m.AccessKey)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.AccessKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastTerm != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.LastTerm))
		i--
		dAtA[i] = 0x48
	}
	if m.UpdateTimestamp != nil {
		{
			size, err := m.UpdateTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodesInfo) > 0 {
		for iNdEx := len(m.NodesInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodesInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfos(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LeaderInfo != nil {
		{
			size, err := m.LeaderInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Term != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WorkerInfo != nil {
		{
			size, err := m.WorkerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Type != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ImageName) > 0 {
		i -= len(m.ImageName)
		copy(dAtA[i:], m.ImageName)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.ImageName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserPort) > 0 {
		i -= len(m.UserPort)
		copy(dAtA[i:], m.UserPort)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserPort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserIp) > 0 {
		i -= len(m.UserIp)
		copy(dAtA[i:], m.UserIp)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.UserIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfoStorageState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoStorageState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoStorageState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTimeStamp != nil {
		{
			size, err := m.UpdateTimeStamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.InfoMap) > 0 {
		for k := range m.InfoMap {
			v := m.InfoMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInfos(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintInfos(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintInfos(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LeaderID != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.LeaderID))
		i--
		dAtA[i] = 0x10
	}
	if m.Term != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.Capacity != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x28
	}
	if m.RpcPort != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.RpcPort))
		i--
		dAtA[i] = 0x20
	}
	if len(m.IpAddr) > 0 {
		i -= len(m.IpAddr)
		copy(dAtA[i:], m.IpAddr)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.IpAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.RaftId != 0 {
		i = encodeVarintInfos(dAtA, i, uint64(m.RaftId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CfContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CfContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CfContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintInfos(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintInfos(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CfName) > 0 {
		i -= len(m.CfName)
		copy(dAtA[i:], m.CfName)
		i = encodeVarintInfos(dAtA, i, uint64(len(m.CfName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CfContents) > 0 {
		for iNdEx := len(m.CfContents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CfContents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfos(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintInfos(dAtA []byte, offset int, v uint64) int {
	offset -= sovInfos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		n += m.Info.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseInfo_NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	return n
}
func (m *BaseInfo_ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterInfo != nil {
		l = m.ClusterInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	return n
}
func (m *BaseInfo_UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	return n
}
func (m *BaseInfo_GroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupInfo != nil {
		l = m.GroupInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	return n
}
func (m *BaseInfo_AccessInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessInfo != nil {
		l = m.AccessInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	return n
}
func (m *BaseInfo_TaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskInfo != nil {
		l = m.TaskInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	return n
}
func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.UserGroup)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.UserEmail)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.UserPassword)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.UserStatus)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.UserCreatedAt != nil {
		l = m.UserCreatedAt.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.UserUpdatedAt != nil {
		l = m.UserUpdatedAt.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.GroupDescription)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.GroupCreatedAt != nil {
		l = m.GroupCreatedAt.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.GroupUpdatedAt != nil {
		l = m.GroupUpdatedAt.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccessInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessKey)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.AccessSecret)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovInfos(uint64(m.Term))
	}
	if m.LeaderInfo != nil {
		l = m.LeaderInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if len(m.NodesInfo) > 0 {
		for _, e := range m.NodesInfo {
			l = e.Size()
			n += 1 + l + sovInfos(uint64(l))
		}
	}
	if m.UpdateTimestamp != nil {
		l = m.UpdateTimestamp.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.LastTerm != 0 {
		n += 1 + sovInfos(uint64(m.LastTerm))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.UserIp)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.UserPort)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovInfos(uint64(m.State))
	}
	if m.Type != 0 {
		n += 1 + sovInfos(uint64(m.Type))
	}
	if m.WorkerInfo != nil {
		l = m.WorkerInfo.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoStorageState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovInfos(uint64(m.Term))
	}
	if m.LeaderID != 0 {
		n += 1 + sovInfos(uint64(m.LeaderID))
	}
	if len(m.InfoMap) > 0 {
		for k, v := range m.InfoMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInfos(uint64(l))
			}
			mapEntrySize := 1 + sovInfos(uint64(k)) + l
			n += mapEntrySize + 1 + sovInfos(uint64(mapEntrySize))
		}
	}
	if m.UpdateTimeStamp != nil {
		l = m.UpdateTimeStamp.Size()
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RaftId != 0 {
		n += 1 + sovInfos(uint64(m.RaftId))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	if m.RpcPort != 0 {
		n += 1 + sovInfos(uint64(m.RpcPort))
	}
	if m.Capacity != 0 {
		n += 1 + sovInfos(uint64(m.Capacity))
	}
	if m.State != 0 {
		n += 1 + sovInfos(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CfContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CfName)
	if l > 0 {
		n += 1 + l + sovInfos(uint64(l))
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovInfos(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovInfos(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CfContents) > 0 {
		for _, e := range m.CfContents {
			l = e.Size()
			n += 1 + l + sovInfos(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInfos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInfos(x uint64) (n int) {
	return sovInfos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &BaseInfo_NodeInfo{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &BaseInfo_ClusterInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &BaseInfo_UserInfo{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GroupInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &BaseInfo_GroupInfo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccessInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &BaseInfo_AccessInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TaskInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &BaseInfo_TaskInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserCreatedAt == nil {
				m.UserCreatedAt = &timestamp.Timestamp{}
			}
			if err := m.UserCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserUpdatedAt == nil {
				m.UserUpdatedAt = &timestamp.Timestamp{}
			}
			if err := m.UserUpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupCreatedAt == nil {
				m.GroupCreatedAt = &timestamp.Timestamp{}
			}
			if err := m.GroupCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupUpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupUpdatedAt == nil {
				m.GroupUpdatedAt = &timestamp.Timestamp{}
			}
			if err := m.GroupUpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaderInfo == nil {
				m.LeaderInfo = &NodeInfo{}
			}
			if err := m.LeaderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodesInfo = append(m.NodesInfo, &NodeInfo{})
			if err := m.NodesInfo[len(m.NodesInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateTimestamp == nil {
				m.UpdateTimestamp = &timestamp.Timestamp{}
			}
			if err := m.UpdateTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTerm", wireType)
			}
			m.LastTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTerm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TaskState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerInfo == nil {
				m.WorkerInfo = &NodeInfo{}
			}
			if err := m.WorkerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoStorageState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoStorageState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoStorageState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			m.LeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfoMap == nil {
				m.InfoMap = make(map[uint64]*NodeInfo)
			}
			var mapkey uint64
			var mapvalue *NodeInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInfos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInfos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInfos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInfos
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInfos
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NodeInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInfos(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthInfos
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InfoMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateTimeStamp == nil {
				m.UpdateTimeStamp = &timestamp.Timestamp{}
			}
			if err := m.UpdateTimeStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftId", wireType)
			}
			m.RaftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcPort", wireType)
			}
			m.RpcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpcPort |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= NodeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CfContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CfContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CfContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CfContents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CfContents = append(m.CfContents, &CfContent{})
			if err := m.CfContents[len(m.CfContents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInfos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInfos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInfos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInfos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInfos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInfos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInfos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInfos = fmt.Errorf("proto: unexpected end of group")
)
