// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: infos.proto

package infos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	timestamp "satweave/utils/timestamp"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InfoType int32

const (
	InfoType_INVALID      InfoType = 0
	InfoType_NODE_INFO    InfoType = 1
	InfoType_BUCKET_INFO  InfoType = 2
	InfoType_CLUSTER_INFO InfoType = 3
	InfoType_USER_INFO    InfoType = 4
	InfoType_GROUP_INFO   InfoType = 5
	InfoType_VOLUME_INFO  InfoType = 6
	InfoType_ACCESS_INFO  InfoType = 7
)

// Enum value maps for InfoType.
var (
	InfoType_name = map[int32]string{
		0: "INVALID",
		1: "NODE_INFO",
		2: "BUCKET_INFO",
		3: "CLUSTER_INFO",
		4: "USER_INFO",
		5: "GROUP_INFO",
		6: "VOLUME_INFO",
		7: "ACCESS_INFO",
	}
	InfoType_value = map[string]int32{
		"INVALID":      0,
		"NODE_INFO":    1,
		"BUCKET_INFO":  2,
		"CLUSTER_INFO": 3,
		"USER_INFO":    4,
		"GROUP_INFO":   5,
		"VOLUME_INFO":  6,
		"ACCESS_INFO":  7,
	}
)

func (x InfoType) Enum() *InfoType {
	p := new(InfoType)
	*p = x
	return p
}

func (x InfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_infos_proto_enumTypes[0].Descriptor()
}

func (InfoType) Type() protoreflect.EnumType {
	return &file_infos_proto_enumTypes[0]
}

func (x InfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InfoType.Descriptor instead.
func (InfoType) EnumDescriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{0}
}

type NodeState int32

const (
	NodeState_UNKNOWN NodeState = 0
	NodeState_ONLINE  NodeState = 1
	NodeState_OFFLINE NodeState = 2
	NodeState_ERROR   NodeState = 3
)

// Enum value maps for NodeState.
var (
	NodeState_name = map[int32]string{
		0: "UNKNOWN",
		1: "ONLINE",
		2: "OFFLINE",
		3: "ERROR",
	}
	NodeState_value = map[string]int32{
		"UNKNOWN": 0,
		"ONLINE":  1,
		"OFFLINE": 2,
		"ERROR":   3,
	}
)

func (x NodeState) Enum() *NodeState {
	p := new(NodeState)
	*p = x
	return p
}

func (x NodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_infos_proto_enumTypes[1].Descriptor()
}

func (NodeState) Type() protoreflect.EnumType {
	return &file_infos_proto_enumTypes[1]
}

func (x NodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeState.Descriptor instead.
func (NodeState) EnumDescriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{1}
}

type BucketConfig_HashType int32

const (
	BucketConfig_OFF         BucketConfig_HashType = 0
	BucketConfig_SHA256      BucketConfig_HashType = 1
	BucketConfig_MURMUR3_128 BucketConfig_HashType = 2
	BucketConfig_MURMUR3_32  BucketConfig_HashType = 3
)

// Enum value maps for BucketConfig_HashType.
var (
	BucketConfig_HashType_name = map[int32]string{
		0: "OFF",
		1: "SHA256",
		2: "MURMUR3_128",
		3: "MURMUR3_32",
	}
	BucketConfig_HashType_value = map[string]int32{
		"OFF":         0,
		"SHA256":      1,
		"MURMUR3_128": 2,
		"MURMUR3_32":  3,
	}
)

func (x BucketConfig_HashType) Enum() *BucketConfig_HashType {
	p := new(BucketConfig_HashType)
	*p = x
	return p
}

func (x BucketConfig_HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketConfig_HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_infos_proto_enumTypes[2].Descriptor()
}

func (BucketConfig_HashType) Type() protoreflect.EnumType {
	return &file_infos_proto_enumTypes[2]
}

func (x BucketConfig_HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketConfig_HashType.Descriptor instead.
func (BucketConfig_HashType) EnumDescriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{6, 0}
}

// BaseInfo collect all type of info
type BaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Info:
	//	*BaseInfo_NodeInfo
	//	*BaseInfo_ClusterInfo
	//	*BaseInfo_BucketInfo
	//	*BaseInfo_UserInfo
	//	*BaseInfo_GroupInfo
	//	*BaseInfo_VolumeInfo
	//	*BaseInfo_AccessInfo
	Info isBaseInfo_Info `protobuf_oneof:"info"`
}

func (x *BaseInfo) Reset() {
	*x = BaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseInfo) ProtoMessage() {}

func (x *BaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseInfo.ProtoReflect.Descriptor instead.
func (*BaseInfo) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{0}
}

func (m *BaseInfo) GetInfo() isBaseInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *BaseInfo) GetNodeInfo() *NodeInfo {
	if x, ok := x.GetInfo().(*BaseInfo_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (x *BaseInfo) GetClusterInfo() *ClusterInfo {
	if x, ok := x.GetInfo().(*BaseInfo_ClusterInfo); ok {
		return x.ClusterInfo
	}
	return nil
}

func (x *BaseInfo) GetBucketInfo() *BucketInfo {
	if x, ok := x.GetInfo().(*BaseInfo_BucketInfo); ok {
		return x.BucketInfo
	}
	return nil
}

func (x *BaseInfo) GetUserInfo() *UserInfo {
	if x, ok := x.GetInfo().(*BaseInfo_UserInfo); ok {
		return x.UserInfo
	}
	return nil
}

func (x *BaseInfo) GetGroupInfo() *GroupInfo {
	if x, ok := x.GetInfo().(*BaseInfo_GroupInfo); ok {
		return x.GroupInfo
	}
	return nil
}

func (x *BaseInfo) GetVolumeInfo() *VolumeInfo {
	if x, ok := x.GetInfo().(*BaseInfo_VolumeInfo); ok {
		return x.VolumeInfo
	}
	return nil
}

func (x *BaseInfo) GetAccessInfo() *AccessInfo {
	if x, ok := x.GetInfo().(*BaseInfo_AccessInfo); ok {
		return x.AccessInfo
	}
	return nil
}

type isBaseInfo_Info interface {
	isBaseInfo_Info()
}

type BaseInfo_NodeInfo struct {
	NodeInfo *NodeInfo `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3,oneof"`
}

type BaseInfo_ClusterInfo struct {
	ClusterInfo *ClusterInfo `protobuf:"bytes,2,opt,name=cluster_info,json=clusterInfo,proto3,oneof"`
}

type BaseInfo_BucketInfo struct {
	BucketInfo *BucketInfo `protobuf:"bytes,3,opt,name=bucket_info,json=bucketInfo,proto3,oneof"`
}

type BaseInfo_UserInfo struct {
	UserInfo *UserInfo `protobuf:"bytes,4,opt,name=user_info,json=userInfo,proto3,oneof"`
}

type BaseInfo_GroupInfo struct {
	GroupInfo *GroupInfo `protobuf:"bytes,5,opt,name=group_info,json=groupInfo,proto3,oneof"`
}

type BaseInfo_VolumeInfo struct {
	VolumeInfo *VolumeInfo `protobuf:"bytes,6,opt,name=volume_info,json=volumeInfo,proto3,oneof"`
}

type BaseInfo_AccessInfo struct {
	AccessInfo *AccessInfo `protobuf:"bytes,7,opt,name=access_info,json=accessInfo,proto3,oneof"`
}

func (*BaseInfo_NodeInfo) isBaseInfo_Info() {}

func (*BaseInfo_ClusterInfo) isBaseInfo_Info() {}

func (*BaseInfo_BucketInfo) isBaseInfo_Info() {}

func (*BaseInfo_UserInfo) isBaseInfo_Info() {}

func (*BaseInfo_GroupInfo) isBaseInfo_Info() {}

func (*BaseInfo_VolumeInfo) isBaseInfo_Info() {}

func (*BaseInfo_AccessInfo) isBaseInfo_Info() {}

// UserInfo is the info of ECOS user
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName      string               `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserGroup     string               `protobuf:"bytes,3,opt,name=user_group,json=userGroup,proto3" json:"user_group,omitempty"`
	UserEmail     string               `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	UserPassword  string               `protobuf:"bytes,5,opt,name=user_password,json=userPassword,proto3" json:"user_password,omitempty"`
	UserStatus    string               `protobuf:"bytes,6,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
	UserCreatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=user_created_at,json=userCreatedAt,proto3" json:"user_created_at,omitempty"`
	UserUpdatedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=user_updated_at,json=userUpdatedAt,proto3" json:"user_updated_at,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{1}
}

func (x *UserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetUserGroup() string {
	if x != nil {
		return x.UserGroup
	}
	return ""
}

func (x *UserInfo) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UserInfo) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *UserInfo) GetUserStatus() string {
	if x != nil {
		return x.UserStatus
	}
	return ""
}

func (x *UserInfo) GetUserCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UserCreatedAt
	}
	return nil
}

func (x *UserInfo) GetUserUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UserUpdatedAt
	}
	return nil
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string               `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName        string               `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupDescription string               `protobuf:"bytes,3,opt,name=group_description,json=groupDescription,proto3" json:"group_description,omitempty"`
	GroupCreatedAt   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=group_created_at,json=groupCreatedAt,proto3" json:"group_created_at,omitempty"`
	GroupUpdatedAt   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=group_updated_at,json=groupUpdatedAt,proto3" json:"group_updated_at,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{2}
}

func (x *GroupInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupInfo) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupInfo) GetGroupDescription() string {
	if x != nil {
		return x.GroupDescription
	}
	return ""
}

func (x *GroupInfo) GetGroupCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.GroupCreatedAt
	}
	return nil
}

func (x *GroupInfo) GetGroupUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.GroupUpdatedAt
	}
	return nil
}

type AccessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey    string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	AccessSecret string `protobuf:"bytes,2,opt,name=access_secret,json=accessSecret,proto3" json:"access_secret,omitempty"`
	UserId       string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BucketId     string `protobuf:"bytes,4,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (x *AccessInfo) Reset() {
	*x = AccessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessInfo) ProtoMessage() {}

func (x *AccessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessInfo.ProtoReflect.Descriptor instead.
func (*AccessInfo) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{3}
}

func (x *AccessInfo) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *AccessInfo) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

func (x *AccessInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AccessInfo) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

// VolumeInfo is the info of ECOS volume.
// It contains the volume owner, quota, and used size.
type VolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId  string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	QuotaSize uint64 `protobuf:"varint,3,opt,name=quota_size,json=quotaSize,proto3" json:"quota_size,omitempty"`
	UsedSize  uint64 `protobuf:"varint,4,opt,name=used_size,json=usedSize,proto3" json:"used_size,omitempty"`
}

func (x *VolumeInfo) Reset() {
	*x = VolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfo) ProtoMessage() {}

func (x *VolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfo.ProtoReflect.Descriptor instead.
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{4}
}

func (x *VolumeInfo) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VolumeInfo) GetQuotaSize() uint64 {
	if x != nil {
		return x.QuotaSize
	}
	return 0
}

func (x *VolumeInfo) GetUsedSize() uint64 {
	if x != nil {
		return x.UsedSize
	}
	return 0
}

// Bucket 标识和权限
type BucketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId   string        `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	BucketName string        `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	UserId     string        `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId    string        `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Mode       int32         `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Config     *BucketConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *BucketInfo) Reset() {
	*x = BucketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketInfo) ProtoMessage() {}

func (x *BucketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketInfo.ProtoReflect.Descriptor instead.
func (*BucketInfo) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{5}
}

func (x *BucketInfo) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *BucketInfo) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *BucketInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BucketInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *BucketInfo) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *BucketInfo) GetConfig() *BucketConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Bucket 读写策略
type BucketConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeySlotNum           int32                 `protobuf:"varint,1,opt,name=key_slot_num,json=keySlotNum,proto3" json:"key_slot_num,omitempty"`
	BlockSize            uint64                `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	BlockHashEnable      bool                  `protobuf:"varint,3,opt,name=block_hash_enable,json=blockHashEnable,proto3" json:"block_hash_enable,omitempty"`
	ObjectHashEnable     bool                  `protobuf:"varint,4,opt,name=object_hash_enable,json=objectHashEnable,proto3" json:"object_hash_enable,omitempty"`
	HistoryVersionEnable bool                  `protobuf:"varint,5,opt,name=history_version_enable,json=historyVersionEnable,proto3" json:"history_version_enable,omitempty"`
	BlockHashType        BucketConfig_HashType `protobuf:"varint,6,opt,name=block_hash_type,json=blockHashType,proto3,enum=messenger.BucketConfig_HashType" json:"block_hash_type,omitempty"`
	ObjectHashType       BucketConfig_HashType `protobuf:"varint,7,opt,name=object_hash_type,json=objectHashType,proto3,enum=messenger.BucketConfig_HashType" json:"object_hash_type,omitempty"`
}

func (x *BucketConfig) Reset() {
	*x = BucketConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketConfig) ProtoMessage() {}

func (x *BucketConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketConfig.ProtoReflect.Descriptor instead.
func (*BucketConfig) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{6}
}

func (x *BucketConfig) GetKeySlotNum() int32 {
	if x != nil {
		return x.KeySlotNum
	}
	return 0
}

func (x *BucketConfig) GetBlockSize() uint64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *BucketConfig) GetBlockHashEnable() bool {
	if x != nil {
		return x.BlockHashEnable
	}
	return false
}

func (x *BucketConfig) GetObjectHashEnable() bool {
	if x != nil {
		return x.ObjectHashEnable
	}
	return false
}

func (x *BucketConfig) GetHistoryVersionEnable() bool {
	if x != nil {
		return x.HistoryVersionEnable
	}
	return false
}

func (x *BucketConfig) GetBlockHashType() BucketConfig_HashType {
	if x != nil {
		return x.BlockHashType
	}
	return BucketConfig_OFF
}

func (x *BucketConfig) GetObjectHashType() BucketConfig_HashType {
	if x != nil {
		return x.ObjectHashType
	}
	return BucketConfig_OFF
}

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term            uint64               `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderInfo      *NodeInfo            `protobuf:"bytes,2,opt,name=leader_info,json=leaderInfo,proto3" json:"leader_info,omitempty"`
	NodesInfo       []*NodeInfo          `protobuf:"bytes,3,rep,name=nodes_info,json=nodesInfo,proto3" json:"nodes_info,omitempty"`
	UpdateTimestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty"`
	MetaPgNum       int32                `protobuf:"varint,5,opt,name=meta_pg_num,json=metaPgNum,proto3" json:"meta_pg_num,omitempty"`
	MetaPgSize      int32                `protobuf:"varint,6,opt,name=meta_pg_size,json=metaPgSize,proto3" json:"meta_pg_size,omitempty"`
	BlockPgNum      int32                `protobuf:"varint,7,opt,name=block_pg_num,json=blockPgNum,proto3" json:"block_pg_num,omitempty"`
	BlockPgSize     int32                `protobuf:"varint,8,opt,name=block_pg_size,json=blockPgSize,proto3" json:"block_pg_size,omitempty"`
	LastTerm        uint64               `protobuf:"varint,9,opt,name=last_term,json=lastTerm,proto3" json:"last_term,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterInfo) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *ClusterInfo) GetLeaderInfo() *NodeInfo {
	if x != nil {
		return x.LeaderInfo
	}
	return nil
}

func (x *ClusterInfo) GetNodesInfo() []*NodeInfo {
	if x != nil {
		return x.NodesInfo
	}
	return nil
}

func (x *ClusterInfo) GetUpdateTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTimestamp
	}
	return nil
}

func (x *ClusterInfo) GetMetaPgNum() int32 {
	if x != nil {
		return x.MetaPgNum
	}
	return 0
}

func (x *ClusterInfo) GetMetaPgSize() int32 {
	if x != nil {
		return x.MetaPgSize
	}
	return 0
}

func (x *ClusterInfo) GetBlockPgNum() int32 {
	if x != nil {
		return x.BlockPgNum
	}
	return 0
}

func (x *ClusterInfo) GetBlockPgSize() int32 {
	if x != nil {
		return x.BlockPgSize
	}
	return 0
}

func (x *ClusterInfo) GetLastTerm() uint64 {
	if x != nil {
		return x.LastTerm
	}
	return 0
}

type InfoStorageState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term            uint64               `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderID        uint64               `protobuf:"varint,2,opt,name=LeaderID,proto3" json:"LeaderID,omitempty"`
	InfoMap         map[uint64]*NodeInfo `protobuf:"bytes,3,rep,name=InfoMap,proto3" json:"InfoMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UpdateTimeStamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=UpdateTimeStamp,proto3" json:"UpdateTimeStamp,omitempty"`
}

func (x *InfoStorageState) Reset() {
	*x = InfoStorageState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoStorageState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoStorageState) ProtoMessage() {}

func (x *InfoStorageState) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoStorageState.ProtoReflect.Descriptor instead.
func (*InfoStorageState) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{8}
}

func (x *InfoStorageState) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *InfoStorageState) GetLeaderID() uint64 {
	if x != nil {
		return x.LeaderID
	}
	return 0
}

func (x *InfoStorageState) GetInfoMap() map[uint64]*NodeInfo {
	if x != nil {
		return x.InfoMap
	}
	return nil
}

func (x *InfoStorageState) GetUpdateTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTimeStamp
	}
	return nil
}

type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryMap map[uint64]*ClusterInfo `protobuf:"bytes,1,rep,name=historyMap,proto3" json:"historyMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{9}
}

func (x *History) GetHistoryMap() map[uint64]*ClusterInfo {
	if x != nil {
		return x.HistoryMap
	}
	return nil
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaftId   uint64    `protobuf:"varint,1,opt,name=raft_id,json=raftId,proto3" json:"raft_id,omitempty"`
	Uuid     string    `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	IpAddr   string    `protobuf:"bytes,3,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	RpcPort  uint64    `protobuf:"varint,4,opt,name=rpc_port,json=rpcPort,proto3" json:"rpc_port,omitempty"`
	Capacity uint64    `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
	State    NodeState `protobuf:"varint,6,opt,name=state,proto3,enum=messenger.NodeState" json:"state,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{10}
}

func (x *NodeInfo) GetRaftId() uint64 {
	if x != nil {
		return x.RaftId
	}
	return 0
}

func (x *NodeInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *NodeInfo) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *NodeInfo) GetRpcPort() uint64 {
	if x != nil {
		return x.RpcPort
	}
	return 0
}

func (x *NodeInfo) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *NodeInfo) GetState() NodeState {
	if x != nil {
		return x.State
	}
	return NodeState_UNKNOWN
}

type CfContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfName string   `protobuf:"bytes,1,opt,name=cf_name,json=cfName,proto3" json:"cf_name,omitempty"`
	Keys   [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Values [][]byte `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CfContent) Reset() {
	*x = CfContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CfContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CfContent) ProtoMessage() {}

func (x *CfContent) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CfContent.ProtoReflect.Descriptor instead.
func (*CfContent) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{11}
}

func (x *CfContent) GetCfName() string {
	if x != nil {
		return x.CfName
	}
	return ""
}

func (x *CfContent) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CfContent) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfContents []*CfContent `protobuf:"bytes,1,rep,name=cf_contents,json=cfContents,proto3" json:"cf_contents,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_infos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_infos_proto_rawDescGZIP(), []int{12}
}

func (x *Snapshot) GetCfContents() []*CfContent {
	if x != nil {
		return x.CfContents
	}
	return nil
}

var File_infos_proto protoreflect.FileDescriptor

var file_infos_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x03, 0x0a, 0x08, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc0, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3e, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x86, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xb7, 0x03, 0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x20, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x48, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x52, 0x4d,
	0x55, 0x52, 0x33, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x52,
	0x4d, 0x55, 0x52, 0x33, 0x5f, 0x33, 0x32, 0x10, 0x03, 0x22, 0xf1, 0x02, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x34, 0x0a,
	0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x70, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x74, 0x61, 0x50, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x70, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x61, 0x50, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x67, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x97, 0x02,
	0x0a, 0x10, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x42, 0x0a, 0x07, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x4f, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x01, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x1a, 0x55, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3,
	0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x61,
	0x66, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x09, 0x43, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63,
	0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x8a, 0x01, 0x0a, 0x08, 0x49, 0x6e,
	0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x07, 0x2a, 0x3c, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x42, 0x19, 0x5a, 0x17, 0x53, 0x61, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65,
	0x2f, 0x73, 0x61, 0x74, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infos_proto_rawDescOnce sync.Once
	file_infos_proto_rawDescData = file_infos_proto_rawDesc
)

func file_infos_proto_rawDescGZIP() []byte {
	file_infos_proto_rawDescOnce.Do(func() {
		file_infos_proto_rawDescData = protoimpl.X.CompressGZIP(file_infos_proto_rawDescData)
	})
	return file_infos_proto_rawDescData
}

var file_infos_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_infos_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_infos_proto_goTypes = []interface{}{
	(InfoType)(0),               // 0: messenger.InfoType
	(NodeState)(0),              // 1: messenger.NodeState
	(BucketConfig_HashType)(0),  // 2: messenger.BucketConfig.HashType
	(*BaseInfo)(nil),            // 3: messenger.BaseInfo
	(*UserInfo)(nil),            // 4: messenger.UserInfo
	(*GroupInfo)(nil),           // 5: messenger.GroupInfo
	(*AccessInfo)(nil),          // 6: messenger.AccessInfo
	(*VolumeInfo)(nil),          // 7: messenger.VolumeInfo
	(*BucketInfo)(nil),          // 8: messenger.BucketInfo
	(*BucketConfig)(nil),        // 9: messenger.BucketConfig
	(*ClusterInfo)(nil),         // 10: messenger.ClusterInfo
	(*InfoStorageState)(nil),    // 11: messenger.InfoStorageState
	(*History)(nil),             // 12: messenger.History
	(*NodeInfo)(nil),            // 13: messenger.NodeInfo
	(*CfContent)(nil),           // 14: messenger.CfContent
	(*Snapshot)(nil),            // 15: messenger.Snapshot
	nil,                         // 16: messenger.InfoStorageState.InfoMapEntry
	nil,                         // 17: messenger.History.HistoryMapEntry
	(*timestamp.Timestamp)(nil), // 18: messenger.Timestamp
}
var file_infos_proto_depIdxs = []int32{
	13, // 0: messenger.BaseInfo.node_info:type_name -> messenger.NodeInfo
	10, // 1: messenger.BaseInfo.cluster_info:type_name -> messenger.ClusterInfo
	8,  // 2: messenger.BaseInfo.bucket_info:type_name -> messenger.BucketInfo
	4,  // 3: messenger.BaseInfo.user_info:type_name -> messenger.UserInfo
	5,  // 4: messenger.BaseInfo.group_info:type_name -> messenger.GroupInfo
	7,  // 5: messenger.BaseInfo.volume_info:type_name -> messenger.VolumeInfo
	6,  // 6: messenger.BaseInfo.access_info:type_name -> messenger.AccessInfo
	18, // 7: messenger.UserInfo.user_created_at:type_name -> messenger.Timestamp
	18, // 8: messenger.UserInfo.user_updated_at:type_name -> messenger.Timestamp
	18, // 9: messenger.GroupInfo.group_created_at:type_name -> messenger.Timestamp
	18, // 10: messenger.GroupInfo.group_updated_at:type_name -> messenger.Timestamp
	9,  // 11: messenger.BucketInfo.config:type_name -> messenger.BucketConfig
	2,  // 12: messenger.BucketConfig.block_hash_type:type_name -> messenger.BucketConfig.HashType
	2,  // 13: messenger.BucketConfig.object_hash_type:type_name -> messenger.BucketConfig.HashType
	13, // 14: messenger.ClusterInfo.leader_info:type_name -> messenger.NodeInfo
	13, // 15: messenger.ClusterInfo.nodes_info:type_name -> messenger.NodeInfo
	18, // 16: messenger.ClusterInfo.update_timestamp:type_name -> messenger.Timestamp
	16, // 17: messenger.InfoStorageState.InfoMap:type_name -> messenger.InfoStorageState.InfoMapEntry
	18, // 18: messenger.InfoStorageState.UpdateTimeStamp:type_name -> messenger.Timestamp
	17, // 19: messenger.History.historyMap:type_name -> messenger.History.HistoryMapEntry
	1,  // 20: messenger.NodeInfo.state:type_name -> messenger.NodeState
	14, // 21: messenger.Snapshot.cf_contents:type_name -> messenger.CfContent
	13, // 22: messenger.InfoStorageState.InfoMapEntry.value:type_name -> messenger.NodeInfo
	10, // 23: messenger.History.HistoryMapEntry.value:type_name -> messenger.ClusterInfo
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_infos_proto_init() }
func file_infos_proto_init() {
	if File_infos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoStorageState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CfContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infos_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BaseInfo_NodeInfo)(nil),
		(*BaseInfo_ClusterInfo)(nil),
		(*BaseInfo_BucketInfo)(nil),
		(*BaseInfo_UserInfo)(nil),
		(*BaseInfo_GroupInfo)(nil),
		(*BaseInfo_VolumeInfo)(nil),
		(*BaseInfo_AccessInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infos_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infos_proto_goTypes,
		DependencyIndexes: file_infos_proto_depIdxs,
		EnumInfos:         file_infos_proto_enumTypes,
		MessageInfos:      file_infos_proto_msgTypes,
	}.Build()
	File_infos_proto = out.File
	file_infos_proto_rawDesc = nil
	file_infos_proto_goTypes = nil
	file_infos_proto_depIdxs = nil
}
