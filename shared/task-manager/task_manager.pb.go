// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: task_manager.proto

package task_manager

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	common "satweave/messenger/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeployTaskRequest struct {
	ExecTask             *common.ExecuteTask `protobuf:"bytes,1,opt,name=exec_task,json=execTask,proto3" json:"exec_task,omitempty"`
	JobId                string              `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	State                *common.File        `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DeployTaskRequest) Reset()         { *m = DeployTaskRequest{} }
func (m *DeployTaskRequest) String() string { return proto.CompactTextString(m) }
func (*DeployTaskRequest) ProtoMessage()    {}
func (*DeployTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_370859c40635d1e2, []int{0}
}
func (m *DeployTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeployTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeployTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeployTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployTaskRequest.Merge(m, src)
}
func (m *DeployTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeployTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployTaskRequest proto.InternalMessageInfo

func (m *DeployTaskRequest) GetExecTask() *common.ExecuteTask {
	if m != nil {
		return m.ExecTask
	}
	return nil
}

func (m *DeployTaskRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *DeployTaskRequest) GetState() *common.File {
	if m != nil {
		return m.State
	}
	return nil
}

type PushRecordRequest struct {
	Record               *common.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	FromSubtask          string         `protobuf:"bytes,2,opt,name=from_subtask,json=fromSubtask,proto3" json:"from_subtask,omitempty"`
	PartitionIdx         int64          `protobuf:"varint,3,opt,name=partition_idx,json=partitionIdx,proto3" json:"partition_idx,omitempty"`
	WorkerId             uint64         `protobuf:"varint,5,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PushRecordRequest) Reset()         { *m = PushRecordRequest{} }
func (m *PushRecordRequest) String() string { return proto.CompactTextString(m) }
func (*PushRecordRequest) ProtoMessage()    {}
func (*PushRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_370859c40635d1e2, []int{1}
}
func (m *PushRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRecordRequest.Merge(m, src)
}
func (m *PushRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRecordRequest proto.InternalMessageInfo

func (m *PushRecordRequest) GetRecord() *common.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *PushRecordRequest) GetFromSubtask() string {
	if m != nil {
		return m.FromSubtask
	}
	return ""
}

func (m *PushRecordRequest) GetPartitionIdx() int64 {
	if m != nil {
		return m.PartitionIdx
	}
	return 0
}

func (m *PushRecordRequest) GetWorkerId() uint64 {
	if m != nil {
		return m.WorkerId
	}
	return 0
}

type RequiredSlotRequest struct {
	//  repeated RequiredSlotDescription slot_descs = 1;
	RequestSlotNum       uint64   `protobuf:"varint,1,opt,name=request_slot_num,json=requestSlotNum,proto3" json:"request_slot_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequiredSlotRequest) Reset()         { *m = RequiredSlotRequest{} }
func (m *RequiredSlotRequest) String() string { return proto.CompactTextString(m) }
func (*RequiredSlotRequest) ProtoMessage()    {}
func (*RequiredSlotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_370859c40635d1e2, []int{2}
}
func (m *RequiredSlotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequiredSlotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequiredSlotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequiredSlotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequiredSlotRequest.Merge(m, src)
}
func (m *RequiredSlotRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequiredSlotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequiredSlotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequiredSlotRequest proto.InternalMessageInfo

func (m *RequiredSlotRequest) GetRequestSlotNum() uint64 {
	if m != nil {
		return m.RequestSlotNum
	}
	return 0
}

type RequiredSlotResponse struct {
	Status               *common.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AvailableWorkers     []uint64       `protobuf:"varint,2,rep,packed,name=available_workers,json=availableWorkers,proto3" json:"available_workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RequiredSlotResponse) Reset()         { *m = RequiredSlotResponse{} }
func (m *RequiredSlotResponse) String() string { return proto.CompactTextString(m) }
func (*RequiredSlotResponse) ProtoMessage()    {}
func (*RequiredSlotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_370859c40635d1e2, []int{3}
}
func (m *RequiredSlotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequiredSlotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequiredSlotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequiredSlotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequiredSlotResponse.Merge(m, src)
}
func (m *RequiredSlotResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequiredSlotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequiredSlotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequiredSlotResponse proto.InternalMessageInfo

func (m *RequiredSlotResponse) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RequiredSlotResponse) GetAvailableWorkers() []uint64 {
	if m != nil {
		return m.AvailableWorkers
	}
	return nil
}

type AvailableWorkersResponse struct {
	Workers              []uint64 `protobuf:"varint,1,rep,packed,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailableWorkersResponse) Reset()         { *m = AvailableWorkersResponse{} }
func (m *AvailableWorkersResponse) String() string { return proto.CompactTextString(m) }
func (*AvailableWorkersResponse) ProtoMessage()    {}
func (*AvailableWorkersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_370859c40635d1e2, []int{4}
}
func (m *AvailableWorkersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvailableWorkersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AvailableWorkersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AvailableWorkersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableWorkersResponse.Merge(m, src)
}
func (m *AvailableWorkersResponse) XXX_Size() int {
	return m.Size()
}
func (m *AvailableWorkersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableWorkersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableWorkersResponse proto.InternalMessageInfo

func (m *AvailableWorkersResponse) GetWorkers() []uint64 {
	if m != nil {
		return m.Workers
	}
	return nil
}

type OperatorRequest struct {
	// 对应的算子
	ClsName string `protobuf:"bytes,1,opt,name=cls_name,json=clsName,proto3" json:"cls_name,omitempty"`
	// 流式计算的数据
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// 计算图的 id
	GraphId              int64    `protobuf:"varint,3,opt,name=graph_id,json=graphId,proto3" json:"graph_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperatorRequest) Reset()         { *m = OperatorRequest{} }
func (m *OperatorRequest) String() string { return proto.CompactTextString(m) }
func (*OperatorRequest) ProtoMessage()    {}
func (*OperatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_370859c40635d1e2, []int{5}
}
func (m *OperatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorRequest.Merge(m, src)
}
func (m *OperatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *OperatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorRequest proto.InternalMessageInfo

func (m *OperatorRequest) GetClsName() string {
	if m != nil {
		return m.ClsName
	}
	return ""
}

func (m *OperatorRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *OperatorRequest) GetGraphId() int64 {
	if m != nil {
		return m.GraphId
	}
	return 0
}

type StartTaskRequest struct {
	SubtaskName          string   `protobuf:"bytes,1,opt,name=subtask_name,json=subtaskName,proto3" json:"subtask_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartTaskRequest) Reset()         { *m = StartTaskRequest{} }
func (m *StartTaskRequest) String() string { return proto.CompactTextString(m) }
func (*StartTaskRequest) ProtoMessage()    {}
func (*StartTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_370859c40635d1e2, []int{6}
}
func (m *StartTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTaskRequest.Merge(m, src)
}
func (m *StartTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartTaskRequest proto.InternalMessageInfo

func (m *StartTaskRequest) GetSubtaskName() string {
	if m != nil {
		return m.SubtaskName
	}
	return ""
}

func init() {
	proto.RegisterType((*DeployTaskRequest)(nil), "messenger.DeployTaskRequest")
	proto.RegisterType((*PushRecordRequest)(nil), "messenger.PushRecordRequest")
	proto.RegisterType((*RequiredSlotRequest)(nil), "messenger.RequiredSlotRequest")
	proto.RegisterType((*RequiredSlotResponse)(nil), "messenger.RequiredSlotResponse")
	proto.RegisterType((*AvailableWorkersResponse)(nil), "messenger.AvailableWorkersResponse")
	proto.RegisterType((*OperatorRequest)(nil), "messenger.OperatorRequest")
	proto.RegisterType((*StartTaskRequest)(nil), "messenger.StartTaskRequest")
}

func init() { proto.RegisterFile("task_manager.proto", fileDescriptor_370859c40635d1e2) }

var fileDescriptor_370859c40635d1e2 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdb, 0x6e, 0xd3, 0x30,
	0x18, 0x5e, 0xb6, 0xee, 0x90, 0xbf, 0x85, 0xad, 0xe6, 0xa0, 0xb0, 0x4d, 0xa5, 0x0b, 0x42, 0x2a,
	0x42, 0x74, 0xd2, 0x06, 0xd7, 0x88, 0x69, 0x20, 0xf5, 0x82, 0x32, 0xa5, 0x48, 0x48, 0x70, 0x11,
	0xb9, 0xc9, 0x4f, 0x9b, 0x35, 0x89, 0x83, 0xed, 0x74, 0xe5, 0x05, 0x78, 0x06, 0xee, 0x79, 0x07,
	0x9e, 0x81, 0x4b, 0x1e, 0x01, 0x95, 0x17, 0x41, 0x76, 0x0e, 0x4d, 0x29, 0xe3, 0xce, 0xfe, 0xfe,
	0x83, 0xbf, 0xff, 0xf3, 0x67, 0x03, 0x91, 0x54, 0x4c, 0xdc, 0x88, 0xc6, 0x74, 0x84, 0xbc, 0x9b,
	0x70, 0x26, 0x19, 0x31, 0x23, 0x14, 0x02, 0xe3, 0x11, 0xf2, 0xfd, 0x86, 0xc7, 0xa2, 0x88, 0xc5,
	0x59, 0xc0, 0xfe, 0x62, 0x40, 0xf3, 0x1c, 0x93, 0x90, 0x7d, 0x7e, 0x4b, 0xc5, 0xc4, 0xc1, 0x4f,
	0x29, 0x0a, 0x49, 0x4e, 0xc1, 0xc4, 0x19, 0x7a, 0xae, 0xea, 0x64, 0x19, 0x6d, 0xa3, 0x53, 0x3f,
	0xb9, 0xdb, 0x2d, 0x5b, 0x74, 0x5f, 0xce, 0xd0, 0x4b, 0x25, 0xea, 0x8a, 0x1d, 0x95, 0xa8, 0x56,
	0xe4, 0x0e, 0x6c, 0x5d, 0xb2, 0xa1, 0x1b, 0xf8, 0xd6, 0x7a, 0xdb, 0xe8, 0x98, 0xce, 0xe6, 0x25,
	0x1b, 0xf6, 0x7c, 0xf2, 0x10, 0x36, 0x85, 0xa4, 0x12, 0xad, 0x0d, 0xdd, 0x67, 0xb7, 0xd2, 0xe7,
	0x55, 0x10, 0xa2, 0x93, 0x45, 0xed, 0x6f, 0x06, 0x34, 0x2f, 0x52, 0x31, 0x76, 0xd0, 0x63, 0xdc,
	0x2f, 0x88, 0x3c, 0x82, 0x2d, 0xae, 0x81, 0x9c, 0x45, 0xb3, 0x52, 0x9d, 0x67, 0xe6, 0x09, 0xe4,
	0x08, 0x1a, 0x1f, 0x39, 0x8b, 0x5c, 0x91, 0x0e, 0x35, 0xed, 0x8c, 0x44, 0x5d, 0x61, 0x83, 0x0c,
	0x22, 0x0f, 0xe0, 0x46, 0x42, 0xb9, 0x0c, 0x64, 0xc0, 0x62, 0x37, 0xf0, 0x67, 0x9a, 0xd2, 0x86,
	0xd3, 0x28, 0xc1, 0x9e, 0x3f, 0x23, 0x07, 0x60, 0x5e, 0x31, 0x3e, 0x41, 0xae, 0x26, 0xd9, 0x6c,
	0x1b, 0x9d, 0x9a, 0xb3, 0x93, 0x01, 0x3d, 0xdf, 0x7e, 0x0e, 0xb7, 0x14, 0xb5, 0x80, 0xa3, 0x3f,
	0x08, 0x99, 0x2c, 0x68, 0x76, 0x60, 0x8f, 0x67, 0x4b, 0x57, 0x84, 0x4c, 0xba, 0x71, 0x1a, 0x69,
	0xc2, 0x35, 0xe7, 0x66, 0x8e, 0xab, 0xec, 0x7e, 0x1a, 0xd9, 0x31, 0xdc, 0x5e, 0x6e, 0x20, 0x12,
	0x16, 0x0b, 0x54, 0x83, 0x2a, 0x1d, 0x52, 0xf1, 0x8f, 0x41, 0x07, 0x3a, 0xe0, 0xe4, 0x09, 0xe4,
	0x31, 0x34, 0xe9, 0x94, 0x06, 0x21, 0x1d, 0x86, 0xe8, 0x66, 0xcc, 0x84, 0xb5, 0xde, 0xde, 0xe8,
	0xd4, 0x9c, 0xbd, 0x32, 0xf0, 0x2e, 0xc3, 0xed, 0xa7, 0x60, 0xbd, 0xf8, 0x0b, 0x2b, 0xcf, 0xb4,
	0x60, 0xbb, 0x28, 0x37, 0x74, 0x79, 0xb1, 0xb5, 0x3f, 0xc0, 0xee, 0x9b, 0x04, 0x39, 0x95, 0x8c,
	0x17, 0x23, 0xde, 0x83, 0x1d, 0x2f, 0x14, 0x6e, 0x4c, 0x23, 0xd4, 0x14, 0x4d, 0x67, 0xdb, 0x0b,
	0x45, 0x9f, 0x46, 0x48, 0x08, 0xd4, 0x7c, 0x2a, 0x69, 0xae, 0xb8, 0x5e, 0xab, 0xf4, 0x11, 0xa7,
	0xc9, 0x58, 0x89, 0x98, 0xa9, 0xbc, 0xad, 0xf7, 0x3d, 0xdf, 0x7e, 0x06, 0x7b, 0x03, 0x49, 0xb9,
	0xac, 0x1a, 0xee, 0x08, 0x1a, 0xf9, 0xbd, 0x55, 0x4f, 0xa8, 0xe7, 0x98, 0x3a, 0xe5, 0xe4, 0xfb,
	0x3a, 0x10, 0x55, 0xf2, 0x3a, 0x33, 0xf6, 0x00, 0xf9, 0x34, 0xf0, 0x90, 0x9c, 0x03, 0x2c, 0xfc,
	0x4b, 0x0e, 0x2b, 0xb2, 0xad, 0xd8, 0x7a, 0xbf, 0xea, 0xe1, 0x7e, 0x10, 0x16, 0x42, 0xd8, 0x6b,
	0xe4, 0x0c, 0xcc, 0x92, 0x13, 0x39, 0x58, 0xd6, 0x7e, 0x89, 0xe9, 0x7f, 0x7a, 0x5c, 0x40, 0xdd,
	0x59, 0x5c, 0x36, 0x69, 0x2d, 0x59, 0x75, 0xc5, 0x33, 0xfb, 0xf7, 0xaf, 0x8d, 0x97, 0x1d, 0xcf,
	0x01, 0x16, 0x4f, 0x62, 0x69, 0xb6, 0x95, 0x97, 0x72, 0x3d, 0xaf, 0xb3, 0xee, 0x8f, 0x79, 0xcb,
	0xf8, 0x39, 0x6f, 0x19, 0xbf, 0xe6, 0x2d, 0xe3, 0xeb, 0xef, 0xd6, 0xda, 0xfb, 0x43, 0x41, 0xe5,
	0x15, 0xd2, 0x29, 0x1e, 0x8b, 0x31, 0xe5, 0xe8, 0x1f, 0x2b, 0x91, 0x9f, 0xe4, 0x3f, 0xc6, 0x70,
	0x4b, 0xff, 0x0c, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xe5, 0x75, 0xd9, 0x48, 0x04,
	0x00, 0x00,
}

func (m *DeployTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeployTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeployTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskManager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintTaskManager(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ExecTask != nil {
		{
			size, err := m.ExecTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskManager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WorkerId != 0 {
		i = encodeVarintTaskManager(dAtA, i, uint64(m.WorkerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PartitionIdx != 0 {
		i = encodeVarintTaskManager(dAtA, i, uint64(m.PartitionIdx))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FromSubtask) > 0 {
		i -= len(m.FromSubtask)
		copy(dAtA[i:], m.FromSubtask)
		i = encodeVarintTaskManager(dAtA, i, uint64(len(m.FromSubtask)))
		i--
		dAtA[i] = 0x12
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskManager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequiredSlotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequiredSlotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequiredSlotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestSlotNum != 0 {
		i = encodeVarintTaskManager(dAtA, i, uint64(m.RequestSlotNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequiredSlotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequiredSlotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequiredSlotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AvailableWorkers) > 0 {
		dAtA5 := make([]byte, len(m.AvailableWorkers)*10)
		var j4 int
		for _, num := range m.AvailableWorkers {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTaskManager(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskManager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AvailableWorkersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvailableWorkersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AvailableWorkersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Workers) > 0 {
		dAtA8 := make([]byte, len(m.Workers)*10)
		var j7 int
		for _, num := range m.Workers {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTaskManager(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GraphId != 0 {
		i = encodeVarintTaskManager(dAtA, i, uint64(m.GraphId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTaskManager(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClsName) > 0 {
		i -= len(m.ClsName)
		copy(dAtA[i:], m.ClsName)
		i = encodeVarintTaskManager(dAtA, i, uint64(len(m.ClsName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubtaskName) > 0 {
		i -= len(m.SubtaskName)
		copy(dAtA[i:], m.SubtaskName)
		i = encodeVarintTaskManager(dAtA, i, uint64(len(m.SubtaskName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTaskManager(dAtA []byte, offset int, v uint64) int {
	offset -= sovTaskManager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeployTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecTask != nil {
		l = m.ExecTask.Size()
		n += 1 + l + sovTaskManager(uint64(l))
	}
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovTaskManager(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovTaskManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovTaskManager(uint64(l))
	}
	l = len(m.FromSubtask)
	if l > 0 {
		n += 1 + l + sovTaskManager(uint64(l))
	}
	if m.PartitionIdx != 0 {
		n += 1 + sovTaskManager(uint64(m.PartitionIdx))
	}
	if m.WorkerId != 0 {
		n += 1 + sovTaskManager(uint64(m.WorkerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequiredSlotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestSlotNum != 0 {
		n += 1 + sovTaskManager(uint64(m.RequestSlotNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequiredSlotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTaskManager(uint64(l))
	}
	if len(m.AvailableWorkers) > 0 {
		l = 0
		for _, e := range m.AvailableWorkers {
			l += sovTaskManager(uint64(e))
		}
		n += 1 + sovTaskManager(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AvailableWorkersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workers) > 0 {
		l = 0
		for _, e := range m.Workers {
			l += sovTaskManager(uint64(e))
		}
		n += 1 + sovTaskManager(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClsName)
	if l > 0 {
		n += 1 + l + sovTaskManager(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTaskManager(uint64(l))
	}
	if m.GraphId != 0 {
		n += 1 + sovTaskManager(uint64(m.GraphId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubtaskName)
	if l > 0 {
		n += 1 + l + sovTaskManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTaskManager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTaskManager(x uint64) (n int) {
	return sovTaskManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeployTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecTask == nil {
				m.ExecTask = &common.ExecuteTask{}
			}
			if err := m.ExecTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &common.File{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &common.Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSubtask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSubtask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionIdx", wireType)
			}
			m.PartitionIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerId", wireType)
			}
			m.WorkerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequiredSlotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequiredSlotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequiredSlotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSlotNum", wireType)
			}
			m.RequestSlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestSlotNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequiredSlotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequiredSlotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequiredSlotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &common.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTaskManager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AvailableWorkers = append(m.AvailableWorkers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTaskManager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTaskManager
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTaskManager
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AvailableWorkers) == 0 {
					m.AvailableWorkers = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTaskManager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AvailableWorkers = append(m.AvailableWorkers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableWorkers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailableWorkersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvailableWorkersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvailableWorkersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTaskManager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Workers = append(m.Workers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTaskManager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTaskManager
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTaskManager
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Workers) == 0 {
					m.Workers = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTaskManager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Workers = append(m.Workers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphId", wireType)
			}
			m.GraphId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraphId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubtaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTaskManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTaskManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTaskManager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTaskManager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTaskManager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTaskManager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTaskManager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTaskManager = fmt.Errorf("proto: unexpected end of group")
)
