// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sun.proto

package sun

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "satweave/messenger/common"
	infos "satweave/sat-node/infos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SunClient is the client API for Sun service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SunClient interface {
	MoonRegister(ctx context.Context, in *infos.NodeInfo, opts ...grpc.CallOption) (*RegisterResult, error)
	GetLeaderInfo(ctx context.Context, in *infos.NodeInfo, opts ...grpc.CallOption) (*infos.NodeInfo, error)
	ReportClusterInfo(ctx context.Context, in *infos.ClusterInfo, opts ...grpc.CallOption) (*common.Result, error)
	GetRegisterTaskManagerTable(ctx context.Context, in *common.NilRequest, opts ...grpc.CallOption) (*TaskManagerResult, error)
	// from user front client
	SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error)
	TriggerCheckpoint(ctx context.Context, in *TriggerCheckpointRequest, opts ...grpc.CallOption) (*TriggerCheckpointResponse, error)
	RestoreFromCheckpoint(ctx context.Context, in *RestoreFromCheckpointRequest, opts ...grpc.CallOption) (*RestoreFromCheckpointResponse, error)
	// from task manager
	RegisterTaskManager(ctx context.Context, in *common.TaskManagerDescription, opts ...grpc.CallOption) (*common.NilResponse, error)
	// from subtask
	AcknowledgeCheckpoint(ctx context.Context, in *AcknowledgeCheckpointRequest, opts ...grpc.CallOption) (*common.NilResponse, error)
}

type sunClient struct {
	cc grpc.ClientConnInterface
}

func NewSunClient(cc grpc.ClientConnInterface) SunClient {
	return &sunClient{cc}
}

func (c *sunClient) MoonRegister(ctx context.Context, in *infos.NodeInfo, opts ...grpc.CallOption) (*RegisterResult, error) {
	out := new(RegisterResult)
	err := c.cc.Invoke(ctx, "/messenger.Sun/MoonRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunClient) GetLeaderInfo(ctx context.Context, in *infos.NodeInfo, opts ...grpc.CallOption) (*infos.NodeInfo, error) {
	out := new(infos.NodeInfo)
	err := c.cc.Invoke(ctx, "/messenger.Sun/GetLeaderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunClient) ReportClusterInfo(ctx context.Context, in *infos.ClusterInfo, opts ...grpc.CallOption) (*common.Result, error) {
	out := new(common.Result)
	err := c.cc.Invoke(ctx, "/messenger.Sun/ReportClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunClient) GetRegisterTaskManagerTable(ctx context.Context, in *common.NilRequest, opts ...grpc.CallOption) (*TaskManagerResult, error) {
	out := new(TaskManagerResult)
	err := c.cc.Invoke(ctx, "/messenger.Sun/GetRegisterTaskManagerTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunClient) SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error) {
	out := new(SubmitJobResponse)
	err := c.cc.Invoke(ctx, "/messenger.Sun/SubmitJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunClient) TriggerCheckpoint(ctx context.Context, in *TriggerCheckpointRequest, opts ...grpc.CallOption) (*TriggerCheckpointResponse, error) {
	out := new(TriggerCheckpointResponse)
	err := c.cc.Invoke(ctx, "/messenger.Sun/TriggerCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunClient) RestoreFromCheckpoint(ctx context.Context, in *RestoreFromCheckpointRequest, opts ...grpc.CallOption) (*RestoreFromCheckpointResponse, error) {
	out := new(RestoreFromCheckpointResponse)
	err := c.cc.Invoke(ctx, "/messenger.Sun/restoreFromCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunClient) RegisterTaskManager(ctx context.Context, in *common.TaskManagerDescription, opts ...grpc.CallOption) (*common.NilResponse, error) {
	out := new(common.NilResponse)
	err := c.cc.Invoke(ctx, "/messenger.Sun/RegisterTaskManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunClient) AcknowledgeCheckpoint(ctx context.Context, in *AcknowledgeCheckpointRequest, opts ...grpc.CallOption) (*common.NilResponse, error) {
	out := new(common.NilResponse)
	err := c.cc.Invoke(ctx, "/messenger.Sun/AcknowledgeCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SunServer is the server API for Sun service.
// All implementations must embed UnimplementedSunServer
// for forward compatibility
type SunServer interface {
	MoonRegister(context.Context, *infos.NodeInfo) (*RegisterResult, error)
	GetLeaderInfo(context.Context, *infos.NodeInfo) (*infos.NodeInfo, error)
	ReportClusterInfo(context.Context, *infos.ClusterInfo) (*common.Result, error)
	GetRegisterTaskManagerTable(context.Context, *common.NilRequest) (*TaskManagerResult, error)
	// from user front client
	SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error)
	TriggerCheckpoint(context.Context, *TriggerCheckpointRequest) (*TriggerCheckpointResponse, error)
	RestoreFromCheckpoint(context.Context, *RestoreFromCheckpointRequest) (*RestoreFromCheckpointResponse, error)
	// from task manager
	RegisterTaskManager(context.Context, *common.TaskManagerDescription) (*common.NilResponse, error)
	// from subtask
	AcknowledgeCheckpoint(context.Context, *AcknowledgeCheckpointRequest) (*common.NilResponse, error)
	mustEmbedUnimplementedSunServer()
}

// UnimplementedSunServer must be embedded to have forward compatible implementations.
type UnimplementedSunServer struct {
}

func (UnimplementedSunServer) MoonRegister(context.Context, *infos.NodeInfo) (*RegisterResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoonRegister not implemented")
}
func (UnimplementedSunServer) GetLeaderInfo(context.Context, *infos.NodeInfo) (*infos.NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderInfo not implemented")
}
func (UnimplementedSunServer) ReportClusterInfo(context.Context, *infos.ClusterInfo) (*common.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportClusterInfo not implemented")
}
func (UnimplementedSunServer) GetRegisterTaskManagerTable(context.Context, *common.NilRequest) (*TaskManagerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisterTaskManagerTable not implemented")
}
func (UnimplementedSunServer) SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedSunServer) TriggerCheckpoint(context.Context, *TriggerCheckpointRequest) (*TriggerCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerCheckpoint not implemented")
}
func (UnimplementedSunServer) RestoreFromCheckpoint(context.Context, *RestoreFromCheckpointRequest) (*RestoreFromCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFromCheckpoint not implemented")
}
func (UnimplementedSunServer) RegisterTaskManager(context.Context, *common.TaskManagerDescription) (*common.NilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTaskManager not implemented")
}
func (UnimplementedSunServer) AcknowledgeCheckpoint(context.Context, *AcknowledgeCheckpointRequest) (*common.NilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeCheckpoint not implemented")
}
func (UnimplementedSunServer) mustEmbedUnimplementedSunServer() {}

// UnsafeSunServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SunServer will
// result in compilation errors.
type UnsafeSunServer interface {
	mustEmbedUnimplementedSunServer()
}

func RegisterSunServer(s grpc.ServiceRegistrar, srv SunServer) {
	s.RegisterService(&Sun_ServiceDesc, srv)
}

func _Sun_MoonRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(infos.NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunServer).MoonRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger.Sun/MoonRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunServer).MoonRegister(ctx, req.(*infos.NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sun_GetLeaderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(infos.NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunServer).GetLeaderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger.Sun/GetLeaderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunServer).GetLeaderInfo(ctx, req.(*infos.NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sun_ReportClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(infos.ClusterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunServer).ReportClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger.Sun/ReportClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunServer).ReportClusterInfo(ctx, req.(*infos.ClusterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sun_GetRegisterTaskManagerTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunServer).GetRegisterTaskManagerTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger.Sun/GetRegisterTaskManagerTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunServer).GetRegisterTaskManagerTable(ctx, req.(*common.NilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sun_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger.Sun/SubmitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunServer).SubmitJob(ctx, req.(*SubmitJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sun_TriggerCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunServer).TriggerCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger.Sun/TriggerCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunServer).TriggerCheckpoint(ctx, req.(*TriggerCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sun_RestoreFromCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreFromCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunServer).RestoreFromCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger.Sun/restoreFromCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunServer).RestoreFromCheckpoint(ctx, req.(*RestoreFromCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sun_RegisterTaskManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TaskManagerDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunServer).RegisterTaskManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger.Sun/RegisterTaskManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunServer).RegisterTaskManager(ctx, req.(*common.TaskManagerDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sun_AcknowledgeCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunServer).AcknowledgeCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messenger.Sun/AcknowledgeCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunServer).AcknowledgeCheckpoint(ctx, req.(*AcknowledgeCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sun_ServiceDesc is the grpc.ServiceDesc for Sun service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sun_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messenger.Sun",
	HandlerType: (*SunServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoonRegister",
			Handler:    _Sun_MoonRegister_Handler,
		},
		{
			MethodName: "GetLeaderInfo",
			Handler:    _Sun_GetLeaderInfo_Handler,
		},
		{
			MethodName: "ReportClusterInfo",
			Handler:    _Sun_ReportClusterInfo_Handler,
		},
		{
			MethodName: "GetRegisterTaskManagerTable",
			Handler:    _Sun_GetRegisterTaskManagerTable_Handler,
		},
		{
			MethodName: "SubmitJob",
			Handler:    _Sun_SubmitJob_Handler,
		},
		{
			MethodName: "TriggerCheckpoint",
			Handler:    _Sun_TriggerCheckpoint_Handler,
		},
		{
			MethodName: "restoreFromCheckpoint",
			Handler:    _Sun_RestoreFromCheckpoint_Handler,
		},
		{
			MethodName: "RegisterTaskManager",
			Handler:    _Sun_RegisterTaskManager_Handler,
		},
		{
			MethodName: "AcknowledgeCheckpoint",
			Handler:    _Sun_AcknowledgeCheckpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sun.proto",
}
